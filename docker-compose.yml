version: '3.8'

services:
  # DBS

  db:
    image: postgres:16-alpine
    volumes:
      - pgdata:/var/lib/postgresql
      - ./postgres-data:/tmp/
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - PGUSER=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 3s

  mongo:
    image: mongo:6-jammy
    volumes:
      - "mongo_data:/data/db"
    ports:
      - "127.0.0.1:27017:27017"

  neo4j:
    image: neo4j:5
    container_name: neo4j
    ports:
      - "127.0.0.1:7474:7474"
      - "127.0.0.1:7687:7687"
    environment:
      - TZ=Europe/Stockholm
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/secretpassword}

  # Queues

  redis:
    image: redis:6.2-alpine
    container_name: redis
    ports:
      - "127.0.0.1:6379:6379"

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    hostname: kafka
    privileged: true
    expose:
      - 9092
    ports:
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - TZ=Europe/Stockholm
      - ALLOW_ANONYMOUS_LOGIN=yes
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LOCAL:PLAINTEXT,CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_BROKER_ID=1001
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1001@kafka:9094
      - ALLOW_PLAINTEXT_LISTENER=yes
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NODE_ID=1001
      - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
      - KAFKA_CFG_KRAFT_REPLICATION_FACTOR=1
      - KAFKA_CFG_ADVERTISED_LISTENERS=LOCAL://127.0.0.1:9093,DOCKER://kafka:9092
      - KAFKA_CFG_LISTENERS=LOCAL://:9093,CONTROLLER://:9094,DOCKER://:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1

  # Backends
  tmdb:
    image: seppaleinen/worldinmovies_tmdb_import
    build: backend/tmdb_import/
    expose:
      - 8020
    ports:
      - "127.0.0.1:8020:8020"
    environment:
      - TMDB_API=${TMDB_API}
    depends_on:
      - mongo
      - kafka
      - redis
    restart: on-failure

  neo4jservice:
    image: seppaleinen/worldinmovies_neo4j
    build: backend/neo4j-service/
    ports:
      - "127.0.0.1:8082:8082"
    restart: on-failure
    depends_on:
      - neo4j
      - kafka
      - tmdb
      - backend

  # Rename to imdb_import
  backend:
    image: seppaleinen/worldinmovies_backend
    build: backend/base/
    expose:
      - 8000
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      - db
      - kafka
      - redis
    restart: on-failure

  # Frontend
  webapp:
    image: seppaleinen/worldinmovies_webapp
    build: frontend/app/
    depends_on:
      - backend
      - tmdb
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}
      - REACT_APP_TMDB_URL=${REACT_APP_TMDB_URL}
      - REACT_APP_NEO_URL=${REACT_APP_NEO_URL}
    healthcheck:
      test: ['CMD', 'nc', '-vz', '-w1', 'localhost', '443']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  pgdata:
  certs:
  kafka_data:
    driver: local
  mongo_data:
    driver: local
