# Generated by Django 2.2.3 on 2019-08-14 16:26
import json, ast, gc
from django.db import models, migrations, connection, transaction


def queryset_iterator(queryset, chunksize=10000, key=None):
    key = [key] if isinstance(key, str) else (key or ['pk'])
    counter = 0
    count = chunksize
    while count == chunksize:
        offset = counter - counter % chunksize
        count = 0
        for item in queryset.all().order_by(*key)[offset:offset + chunksize]:
            count += 1
            yield item
        counter += count
        gc.collect()

def add_genres_from_raw_response(apps, schema_editor):
    Movie = apps.get_model('app', 'Movie')
    Genres = apps.get_model('app', 'Genre')
    count = 1
    total_count = Movie.objects.filter(fetched=True).count()
    percentage = 0
    for movie in queryset_iterator(Movie.objects.filter(fetched=True), chunksize=1000, key='id'):
        with transaction.atomic():
            temp_perc = int(100 * count/total_count)
            if percentage != temp_perc:
                percentage = temp_perc
                print("Saved %s percent" % percentage)
            movie.genres.clear()
            raw = ast.literal_eval(movie.raw_response)
            try:
                genres_from_movie = json.loads(raw)["genres"]
            except TypeError:
                genres_from_movie = raw["genres"]
            for genre in genres_from_movie:
                movie.genres.add(Genres.objects.get(pk=genre["id"]))
            count += 1
            movie.save()


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0016_auto_20190803_2150'),
    ]

    operations = [
        migrations.RunPython(add_genres_from_raw_response),
    ]
