# Generated by Django 2.2.3 on 2019-09-12 10:07

from django.db import migrations, connection


def delete_duplicate_imdb_ids(apps, schema_editor):
    movie_ids = []
    with connection.cursor() as cursor:
        cursor.execute("""
        select id from app_movie where imdb_id in (
		        select subselect.imdb_id from 
			        (select imdb_id, count(*) as counts from app_movie where imdb_id is not null and imdb_id != '' group by imdb_id) as subselect 
		        where subselect.counts > 1
	        )
        """)
        movie_ids = str([item[0] for item in cursor.fetchall()]).strip('[]')

    if len(movie_ids) > 0:
        print("Movie ids: %s" % movie_ids)
        print("Deleting production countries related to duplicated imdbs")
        with connection.cursor() as cursor:
            cursor.execute("delete from app_productioncountries_movies where movie_id in (%s)" % movie_ids)
        print("Deleting spoken languages related to duplicated imdbs")
        with connection.cursor() as cursor:
            cursor.execute("delete from app_spokenlanguage_movies where movie_id in (%s)" % movie_ids)
        print("Deleting alternative titles related to duplicated imdbs")
        with connection.cursor() as cursor:
            cursor.execute("delete from app_alternativetitle where movie_id in (%s)" % movie_ids)
        print("Deleting genres related to duplicated imdbs")
        with connection.cursor() as cursor:
            cursor.execute("delete from app_genre_movies where movie_id in (%s)" % movie_ids)
        print("Deleting movies related to duplicated imdbs")
        with connection.cursor() as cursor:
            cursor.execute("delete from app_movie where id in (%s)" % movie_ids)


class Migration(migrations.Migration):
    dependencies = [
        ('app', '0017_add_genres_from_raw_response'),
    ]

    operations = [
        migrations.RunPython(delete_duplicate_imdb_ids),
    ]
